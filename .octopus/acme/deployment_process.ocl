step "deploy-secret" {
    name = "Deploy Secret"
    properties = {
        Octopus.Action.TargetRoles = "cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        environments = ["development"]
        is_required = true
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Secret
                metadata:
                  name: database-credentials
                type: Opaque
                stringData:
                  sa-password: #{stringData:sa-password}
                  connectionstring: #{stringData:connectionstring}
                  SA_PASSWORD: #{stringData:SA_PASSWORD}
                EOT
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.Kubernetes.Namespace}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:6.1.0-ubuntu.22.04"
        }
    }
}

step "deploy-pv" {
    name = "Deploy Persisted Volume Claim"
    properties = {
        Octopus.Action.TargetRoles = "cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        environments = ["development"]
        is_disabled = true
        is_required = true
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.WaitForJobs = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: PersistentVolumeClaim
                metadata:
                  name: mssql-pvc
                spec:    
                  storageClassName: gp3
                  accessModes:
                    - ReadWriteOnce
                  resources:
                    requests:
                      storage: 8Gi
                      
                EOT
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.Kubernetes.Namespace}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:6.1.0-ubuntu.22.04"
        }
    }
}

step "deploy-storage" {
    name = "Deploy Storage"
    properties = {
        Octopus.Action.TargetRoles = "cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        environments = ["development"]
        is_disabled = true
        is_required = true
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: PersistentVolume
                metadata:
                  name: mssql-pv-volume
                  labels:
                    type: local
                spec:
                  storageClassName: gp3
                  capacity:
                    storage: 1Gi
                  accessModes:
                    - ReadWriteOnce
                  hostPath:
                    path: "/mnt/data"
                EOT
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.Kubernetes.Namespace}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:6.1.0-ubuntu.22.04"
        }
    }
}

step "deploy-sql-server-cluster-ip-service" {
    name = "Deploy SQL Server Cluster IP Service"
    properties = {
        Octopus.Action.TargetRoles = "cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        environments = ["development"]
        properties = {
            Octopus.Action.AutoRetry.MaximumCount = "3"
            Octopus.Action.Kubernetes.DeploymentTimeout = "200"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.WaitForJobs = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: mssql
                spec:
                  type: ClusterIP
                  selector:
                    app: mssql 
                    app.kubernetes.io/name: mssql
                  ports:
                    - protocol: TCP
                      port: 1433
                      targetPort: 1433
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "#{K8.Sql.Server.ClusterIP}"
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.Kubernetes.Namespace}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:6.1.0-ubuntu.22.04"
        }
    }
}

step "deploy-sql-server" {
    name = "Deploy SQL Server "
    properties = {
        Octopus.Action.TargetRoles = "cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        environments = ["development"]
        is_required = true
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: apps/v1
                kind: StatefulSet
                metadata:
                  name: mssql
                spec:
                  serviceName: mssql
                  replicas: 1
                  selector:
                    matchLabels:
                      app: mssql
                      app.kubernetes.io/name: mssql
                  template:
                    metadata:
                      labels:
                        app: mssql
                        app.kubernetes.io/name: mssql
                    spec:
                      terminationGracePeriodSeconds: 30
                      hostname: mssqlinst
                      securityContext:
                        fsGroupChangePolicy: OnRootMismatch    
                      containers:
                        - name: mssql
                          image: 'mcr.microsoft.com/mssql/server:2022-latest'
                          ports:
                            - containerPort: 1433
                              name: tcpsql
                          securityContext:
                            capabilities:
                              add:
                                - NET_BIND_SERVICE
                          env:
                            - name: MSSQL_SA_PASSWORD
                              valueFrom:
                                secretKeyRef:
                                  name: database-credentials
                                  key: sa-password
                            - name: ACCEPT_EULA
                              value: 'Y'
                            - name: MSSQL_PID
                              value: Developer
                          resources:
                            requests:
                              memory: 2G
                              cpu: 2000m
                            limits:
                              memory: 2G
                              cpu: 2000m
                          volumeMounts:
                            - name: mssql-data
                              mountPath: /var/opt/mssql
                  volumeClaimTemplates:
                    - metadata:
                        name: mssql-data
                      spec:
                        accessModes:
                          - ReadWriteOnce
                        storageClassName: gp3
                        resources:
                          requests:
                            storage: 8Gi
                
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "#{K8.Sql.Server.Deployment}"
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.Kubernetes.Namespace}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:6.1.0-ubuntu.22.04"
        }
    }
}

step "run-database-job" {
    name = "Run Database job"
    properties = {
        Octopus.Action.TargetRoles = "cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        environments = ["development"]
        is_disabled = true
        is_required = true
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: batch/v1
                kind: Job
                metadata:
                  name: octopetshop-dbup
                spec:
                  template:
                    spec: 
                      securityContext:
                        fsGroupChangePolicy: OnRootMismatch
                      volumes:
                        - name: temp
                          emptyDir: {}
                      containers:
                        - name: dbup
                          image: octopussamples/octopetshop-database                   
                          command:
                            - dotnet
                            - run
                            - '--no-launch-profile'
                          volumeMounts:
                            - mountPath: /temp
                              name: temp
                          env:
                            - name: DbUpConnectionString
                              valueFrom:
                                secretKeyRef:
                                  name: database-credentials
                                  key: connectionstring
                      restartPolicy: Never
                
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "k8s/octopetshop-database-job.yaml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.Kubernetes.Namespace}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:6.1.0-ubuntu.22.04"
        }
    }
}

step "deploy-shopping-cart-cluster-ip-service" {
    name = "Deploy Shopping Cart Cluster IP Service"
    properties = {
        Octopus.Action.TargetRoles = "cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        environments = ["development"]
        is_required = true
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: shoppingcart-cluster-ip-service
                spec:
                  type: ClusterIP
                  selector:
                    component: shoppingcart
                  ports:
                    - port: 5012
                      targetPort: 5012
                      name: http-port
                    - port: 5013
                      targetPort: 5013
                      name: https-port
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "#{K8.Shopping.Cart.ClusterIP}"
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.Kubernetes.Namespace}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:6.1.0-ubuntu.22.04"
        }
    }
}

step "deploy-shopping-cart-deployment" {
    name = "Deploy Shopping Cart Deployment"
    properties = {
        Octopus.Action.TargetRoles = "cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        environments = ["development"]
        is_required = true
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: shoppingcartservice-deployment
                spec:
                  replicas: 1
                  selector:
                    matchLabels:
                      component: shoppingcart
                  template:
                    metadata:
                      labels:
                        component: shoppingcart   
                    spec:
                      containers:
                        - name: shoppingcart
                          image: octopussamples/octopetshop-shoppingcartservice          
                          env:
                            - name: OPSConnectionString
                              valueFrom:
                                secretKeyRef:
                                  name: database-credentials
                                  key: connectionstring
                EOT
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "#{K8.Shopping.Cart.Deployment}"
            Octopus.Action.KubernetesContainers.Namespace = "#{Project.Kubernetes.Namespace}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:6.1.0-ubuntu.22.04"
        }
    }
}